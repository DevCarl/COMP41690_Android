package com.eventapp.eventapp;import android.content.SharedPreferences;import android.content.res.Configuration;import android.content.res.Resources;import android.os.Bundle;import android.os.SystemClock;import android.preference.PreferenceManager;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.view.Menu;import android.view.MenuItem;import android.view.MotionEvent;import android.view.View;import android.widget.ArrayAdapter;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.TextView;public class MainActivity extends AppCompatActivity {    private String[] mPlanetTitles;    private ListView mDrawerList;    private DrawerLayout mDrawerLayout;    private ActionBarDrawerToggle mDrawerToggle;    private CharSequence mDrawerTitle = "Navigation";    private CharSequence mTitle = "Event App";    private RelativeLayout tutorialLayout;    private TextView tutorialText;    private Boolean firstTime;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        firstTime = (Boolean) getIntent().getExtras().getSerializable("firstTime");        Resources res = getResources();        mPlanetTitles = res.getStringArray(R.array.planets_array);        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);        mDrawerList = (ListView) findViewById(R.id.left_drawer);        // Set the adapter for the list view        mDrawerList.setAdapter(new ArrayAdapter<String>(this,        R.layout.drawer_list_item, mPlanetTitles));        // Set the list's click listener        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);        mDrawerToggle = new ActionBarDrawerToggle(                this,                  /* host Activity */                mDrawerLayout,         /* DrawerLayout object */                //R.drawable.ic_drawer,  /* nav drawer icon to replace 'Up' caret */                R.string.drawer_open,  /* "open drawer" description */                R.string.drawer_close  /* "close drawer" description */        ) {            /** Called when a drawer has settled in a completely closed state. */            public void onDrawerClosed(View view) {                super.onDrawerClosed(view);                getSupportActionBar().setTitle(mTitle);            }            /** Called when a drawer has settled in a completely open state. */            public void onDrawerOpened(View drawerView) {                super.onDrawerOpened(drawerView);                getSupportActionBar().setTitle(mDrawerTitle);            }        };        // Set the drawer toggle as the DrawerListener        mDrawerLayout.setDrawerListener(mDrawerToggle);        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setHomeButtonEnabled(true);        // If this is the first time the MainActivity is displayed, ask if they want tutorial        if (firstTime) {            final String[] tutStringArray = res.getStringArray(R.array.tutorial_array);            mainTutorial(tutStringArray);        }    }    @Override    protected void onPostCreate(Bundle savedInstanceState) {        super.onPostCreate(savedInstanceState);        // Sync the toggle state after onRestoreInstanceState has occurred.        mDrawerToggle.syncState();        }    @Override    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        mDrawerToggle.onConfigurationChanged(newConfig);        }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Pass the event to ActionBarDrawerToggle, if it returns        // true, then it has handled the app icon touch event        if (mDrawerToggle.onOptionsItemSelected(item)) {        return true;        }        // Handle your other action bar items...        return super.onOptionsItemSelected(item);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.listings_menu, menu);        return true;    }    public void mainTutorial(final String[] tutStringArray) {        tutorialLayout = (RelativeLayout) findViewById(R.id.tutorial_layout);        tutorialLayout.setVisibility(View.VISIBLE);        tutorialText = (TextView) findViewById(R.id.text_tutorial);        tutorialText.setVisibility(View.VISIBLE);        tutorialLayout.setClickable(true);        tutorialLayout.setOnClickListener(new View.OnClickListener() {            private int count = 0;            private double lastClickTime = 0;            @Override            public void onClick(View v) {                if (SystemClock.elapsedRealtime() - lastClickTime > 1000) {                    lastClickTime = SystemClock.elapsedRealtime();                    if (count < tutStringArray.length) {                        tutorialText.setText(tutStringArray[count]);                        count++;                    } else {                        tutorialText.setVisibility(View.INVISIBLE);                        tutorialLayout.setVisibility(View.INVISIBLE);                        tutorialLayout.setClickable(false);                    }                }            }        });    }}