package com.eventapp.eventapp;import android.content.Intent;import android.content.SharedPreferences;import android.content.res.Configuration;import android.content.res.Resources;import android.os.Bundle;import android.preference.PreferenceManager;import android.support.v4.widget.DrawerLayout;import android.support.v7.app.ActionBarDrawerToggle;import android.support.v7.app.AppCompatActivity;import android.util.Log;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.AdapterView;import android.widget.ArrayAdapter;import android.widget.ListView;import android.widget.RelativeLayout;import android.widget.TextView;public class PersonalEventsActivity extends AppCompatActivity {    private String[] mDrawerListItems;    private String[] drawer_array;    private String[] tutorial_array;    private ListView mDrawerList;    private DrawerLayout mDrawerLayout;    private ActionBarDrawerToggle mDrawerToggle;    private CharSequence mDrawerTitle = "Navigation";    private CharSequence mTitle = "Event App";    private RelativeLayout tutorialLayout;    private TextView tutorialText;    private SharedPreferences pref;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);        pref = PreferenceManager.getDefaultSharedPreferences(this);        Resources res = getResources();        mDrawerListItems = res.getStringArray(R.array.drawer_items);        drawer_array = res.getStringArray(R.array.drawer_array);        tutorial_array = res.getStringArray(R.array.tutorial_array);        tutorialText = (TextView) findViewById(R.id.text_tutorial);        tutorialLayout = (RelativeLayout) findViewById(R.id.tutorial_layout);        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);        mDrawerList = (ListView) findViewById(R.id.left_drawer);        // Set the adapter for the list view        mDrawerList.setAdapter(new ArrayAdapter<String>(this,        R.layout.drawer_list_item, mDrawerListItems));        // Set the list's click listener        mDrawerLayout = (DrawerLayout) findViewById(R.id.drawer_layout);        mDrawerToggle = new ActionBarDrawerToggle(                this,                  /* host Activity */                mDrawerLayout,         /* DrawerLayout object */                //R.drawable.ic_drawer,  /* nav drawer icon to replace 'Up' caret */                R.string.drawer_open,  /* "open drawer" description */                R.string.drawer_close  /* "close drawer" description */        ) {            /** Called when a drawer has settled in a completely closed state. */            public void onDrawerClosed(View view) {                super.onDrawerClosed(view);                getSupportActionBar().setTitle(mTitle);            }            /** Called when a drawer has settled in a completely open state. */            public void onDrawerOpened(View drawerView) {                super.onDrawerOpened(drawerView);                getSupportActionBar().setTitle(mDrawerTitle);                // If this is the first time opening the drawer, go to tutorial                if (pref.getBoolean("firstTimeDrawerTutorial", true)) {                    helpers.tutorial(drawer_array, tutorialLayout, tutorialText, getApplicationContext());                    SharedPreferences.Editor editor = pref.edit();                    editor.putBoolean("firstTimeDrawerTutorial", false);                    editor.apply();                }            }        };        // Set the drawer toggle as the DrawerListener        mDrawerLayout.setDrawerListener(mDrawerToggle);        getSupportActionBar().setTitle("My Event Feed");        getSupportActionBar().setDisplayHomeAsUpEnabled(true);        getSupportActionBar().setHomeButtonEnabled(true);        mDrawerList.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {                Intent intent;                mDrawerLayout.closeDrawers();                switch(position){                    case 0:                        intent = new Intent(getApplicationContext(), SearchActivity.class);                        startActivity(intent);                        break;                    case 1:                        intent = new Intent(getApplicationContext(), SavedEventsActivity.class);                        startActivity(intent);                        break;                    case 2:                        intent = new Intent(getApplicationContext(), AboutUsActivity.class);                        startActivity(intent);                        break;                    default:                        Log.e("Adapter", "Clicky");                }            }        });        // If this is the first time the PersonalEventsActivity is displayed, show a tutorial        if (pref.getBoolean("firstTimeTutorial", true)) {            // Call helpers.tutorial to replace the placeholder with the tutorial            helpers.tutorial(tutorial_array, tutorialLayout, tutorialText, this);            SharedPreferences.Editor editor = pref.edit();            editor.putBoolean("firstTimeTutorial", false);            editor.apply();        }    }    @Override    protected void onPostCreate(Bundle savedInstanceState) {        super.onPostCreate(savedInstanceState);        // Sync the toggle state after onRestoreInstanceState has occurred.        mDrawerToggle.syncState();        }    @Override    public void onConfigurationChanged(Configuration newConfig) {        super.onConfigurationChanged(newConfig);        mDrawerToggle.onConfigurationChanged(newConfig);        }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Pass the event to ActionBarDrawerToggle, if it returns        // true, then it has handled the app icon touch event        if (mDrawerToggle.onOptionsItemSelected(item)) {        return true;        }        // Handle your other action bar items...        return super.onOptionsItemSelected(item);    }    @Override    public boolean onCreateOptionsMenu(Menu menu) {        // Inflate the menu; this adds items to the action bar if it is present.        getMenuInflater().inflate(R.menu.listings_menu, menu);        getMenuInflater().inflate(R.menu.map_menu, menu);        // Locate MenuItem with ShareActionProvider        //MenuItem item = menu.findItem(R.id.);        return true;    }}